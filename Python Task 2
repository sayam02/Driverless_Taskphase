import csv

with open('person_name.csv', 'wb') as csvfile:
    filewriter = csv.writer(csvfile, delimiter=',',quotechar='|', quoting=csv.QUOTE_MINIMAL)
    filewriter.writerow(['Name', 'Number'])
    filewriter.writerow(['Vivek', '23'])
    filewriter.writerow(['Steve', '33'])
    filewriter.writerow(['Paul', '18'])
    
    #1A
    import Person_name as Person_nameForSortingCSV

csvData = pandasForSortingCSV.read_csv("sample.csv")

print("\nBefore sorting:")
print(csvData)

csvData.sort_values(["Number"],
                    axis=0,
                    ascending=[False],
                    inplace=True)

print("\nAfter sorting:")
print(csvData)

    #1B
    import Person_name as pd
df = pd.read_csv(some_path)
df = df.iloc[::2]


    #1C
    
    
    #2
    from __future__ import print_function

def add(matrix_a, matrix_b):
    rows = len(matrix_a)
    columns = len(matrix_a[0])
    matrix_c = []
    for i in range(rows):
        list_1 = []
        for j in range(columns):
            val = matrix_a[i][j] + matrix_b[i][j]
            list_1.append(val)
        matrix_c.append(list_1)
    return matrix_c

def scalarMultiply(matrix , n):
    return [[x * n for x in row] for row in matrix]

def multiply(matrix_a, matrix_b):
    matrix_c = []
    n = len(matrix_a)
    for i in range(n):
        list_1 = []
        for j in range(n):
            val = 0
            for k in range(n):
                val = val + matrix_a[i][k] * matrix_b[k][j]
            list_1.append(val)
        matrix_c.append(list_1)
    return matrix_c

def identity(n):
    return [[int(row == column) for column in range(n)] for row in range(n)] 

def transpose(matrix):
    return map(list , zip(*matrix))

def minor(matrix, row, column):
    minor = matrix[:row] + matrix[row + 1:]
    minor = [row[:column] + row[column + 1:] for row in minor]
    return minor

#A
def inverse(matrix):
    det = determinant(matrix)
    if det == 0: return None


#B
def determinant(matrix):
    if len(matrix) == 1: return matrix[0][0]
    
    res = 0
    for x in range(len(matrix)):
        res += matrix[0][x] * determinant(minor(matrix , 0 , x)) * (-1) ** x
    return res


    #C
    matrixMinor = [[] for _ in range(len(matrix))]
    for i in range(len(matrix)):
        for j in range(len(matrix)):
            matrixMinor[i].append(determinant(minor(matrix , i , j)))
    
    cofactors = [[x * (-1) ** (row + col) for col, x in enumerate(matrixMinor[row])] for row in range(len(matrix))]
    adjugate = transpose(cofactors)
    return scalarMultiply(adjugate , 1/det)


