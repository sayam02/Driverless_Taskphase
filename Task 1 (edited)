#1A)		
		X = [[1,2,3],[4,5,6],[7,8,9]]
		Y = [[10,11,12,13],[14,15,16,17],[18,19,20,21]]
		result = [[0,0,0,0],[0,0,0,0],[0,0,0,0]]
		for i in range(len(X)):
		  for j in range(len(Y[0])):
		      for k in range(len(Y)):
		          result[i][j] += X[i][k] * Y[k][j]
		for r in result:
		  print(r)
		
		#B)
		N = 4
		def transpose(A, B):
		   for i in range(N):
		       for j in range(N):
		           B[i][j] = A[j][i]
		A = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]
		B = A[:][:]
		transpose(A, B)
		print("Result matrix is")
		for i in range(N):
		   for j in range(N):
		       print(B[i][j], " ", end='')
		   print()
#1C)
A=[]
n=int(input("Enter N for N x N matrix: "))
print("Enter the element ::>")
for i in range(n):
  row=[]
  for j in range(n):
     row.append(int(input()))
     A.append(row)
print(A)
print("Display Array In Matrix Form")
for i in range(n):
  for j in range(n):
     print(A[i][j], end=" ")
  print()
B=[]
n=int(input("Enter N for N x N matrix : "))
print("Enter the element ::>")
for i in range (n):
  row=[]
  for j in range(n):
     row.append(int(input()))
     B.append(row)
print(B)
print("Display Array In Matrix Form")
for i in range(n):
  for j in range(n):
     print(B[i][j], end=" ")
  print()
result = [[0,0,0], [0,0,0], [0,0,0]]
for i in range(len(A)):
  for j in range(len(B[0])):
     for k in range(len(B)):
        result[i][j] += A[i][k] * B[k][j]
print("The Resultant Matrix Is ::>")
for r in result:

   for i in range(len(X)):
       for
   j in range(len(X[0])):

   result[j][i] = X[i][j]

   for r in result:
       print(r)
  print(r)

		#2A)
		def removeDuplicates(lst):
		   return [t for t in (set(tuple(i) for i in lst))]
		lst = [(9,9),(11,17),(9,9),(6,8)]
		print(removeDuplicates(lst))
		
		#B)
		func([('car', 500), ('bike', 200), ('truck', 300)])
		
		def divide(lst, left_sum, right_sum):
		   if not lst:
		       return left_sum == right_sum
		
		   obj, value = lst[0]
		   return divide(lst[1:],left_sum + value, right_sum) or divide(lst[1:],left_sum, right_sum+value)
		
		assert divide([('car', 500), ('bike', 200), ('truck', 300)],0,0)
		assert not divide([('car', 500), ('bike', 200), ('truck', 301)],0,0)

#3A)
def is_palindrome(s):
    if len(s) < 1:
        return True
    else:
        if s[0] == s[-1]:
            return is_palindrome(s[1:-1])
        else:
            return False
a=str(input("Enter string:"))
if(is_palindrome(a)==True):
    print("String is a palindrome!")
else:
    print("String isn't a palindrome!")
#B)
def change(s):
   n = len(s)
   cc = 0

   for i in range(n // 2):
       if (s[i] == s[n - i - 1]):
           continue
       cc += 1
       if (s[i] < s[n - i - 1]):
           s[n - i - 1] = s[i]
       else:
           s[i] = s[n - i - 1]

   print("Minimum characters to be replaced = ", str(cc))
   print(*s, sep="")

# Driver code
s = "geeks"
change(list(s))


